
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <map>
#include <algorithm>

using namespace std;

vector<int> solution(vector<string> genres, vector<int> plays) 
{
    unordered_map<string, int> totalPlays;
    unordered_map<string, vector<pair<int, int>>> genreSongs;

   
    for (int i = 0; i < genres.size(); ++i) 
    {
        totalPlays[genres[i]] += plays[i];
        genreSongs[genres[i]].push_back({ plays[i], i });
    }

    vector<pair<string, int>> sortedGenres;

    for (auto& entry : totalPlays) 
    {
        sortedGenres.push_back({ entry.first, entry.second });
    }

    sort(sortedGenres.begin(), sortedGenres.end(), [](const auto& a, const auto& b)
    {
        return a.second > b.second;
    });

    vector<int> answer;

    for (const auto& genre : sortedGenres)
    {
        auto& songs = genreSongs[genre.first];
       
        sort(songs.begin(), songs.end(), [](const auto& a, const auto& b) 
            {
            if (a.first == b.first) 
                return a.second < b.second;
            return a.first > b.first;
            });

       
        if (songs.size() == 1)
        {
            answer.push_back(songs[0].second);
        }
       
        else 
        {
            answer.push_back(songs[0].second);
            answer.push_back(songs[1].second);
        }
    }

    return answer;
}

int main()
{
    vector<string> genres = { "classic", "pop", "classic", "classic", "pop" };
    vector<int> plays = { 500, 600, 150, 800, 2500 };


    vector<int> result =  solution(genres, plays);


    for (auto test : result)
    {
        cout << test << ",";

    }
    return 0;

}



